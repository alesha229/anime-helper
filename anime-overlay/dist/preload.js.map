{
  "version": 3,
  "sources": ["../src/preload.ts"],
  "sourcesContent": ["import { contextBridge, ipcRenderer } from \"electron\";\n\ncontextBridge.exposeInMainWorld(\"overlayAPI\", {\n  toggleClickThrough: (enabled: boolean) =>\n    ipcRenderer.invoke(\"overlay-toggle-click-through\", enabled),\n  close: () => ipcRenderer.send(\"overlay-close\"),\n  setOpacity: (v: number | string) =>\n    ipcRenderer.send(\"overlay-set-opacity\", v),\n  openDevTools: () => ipcRenderer.send(\"overlay-open-devtools\"),\n  enterFullscreen: () => ipcRenderer.send(\"overlay-enter-fullscreen\"),\n  exitFullscreen: () => ipcRenderer.send(\"overlay-exit-fullscreen\"),\n  saveLastModel: (url: string) =>\n    ipcRenderer.send(\"overlay-save-last-model\", url),\n  getLastModel: (): Promise<string | null> =>\n    ipcRenderer.invoke(\"overlay-get-last-model\"),\n  saveModelState: (url: string, x: number, y: number, scale: number) =>\n    ipcRenderer.send(\"overlay-save-model-state\", { url, x, y, scale }),\n  getModelState: (\n    url: string\n  ): Promise<{ x: number; y: number; scale: number } | null> =>\n    ipcRenderer.invoke(\"overlay-get-model-state\", url),\n  // Return caret/screen typing position from host (optional)\n  getCaretPosition: (): Promise<{ x: number; y: number } | null> =>\n    ipcRenderer.invoke(\"overlay-get-caret-position\"),\n  setZoomFactor: (zoomFactor: number = 1.0) =>\n    ipcRenderer.invoke(\"overlay-set-zoom-factor\", zoomFactor),\n  saveZoomSetting: (url: string, zoomFactor: number) =>\n    ipcRenderer.send(\"overlay-save-zoom-setting\", { url, zoomFactor }),\n  getZoomSetting: (url: string): Promise<number> =>\n    ipcRenderer.invoke(\"overlay-get-zoom-setting\", url),\n  onEvent: (cb: (data: any) => void) => {\n    ipcRenderer.on(\"overlay-event\", (_ev, data) => {\n      try {\n        cb(data);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  },\n});\n\ndeclare global {\n  interface Window {\n    overlayAPI: {\n      toggleClickThrough: (enabled: boolean) => Promise<boolean>;\n      close: () => void;\n      setOpacity: (v: number | string) => void;\n      openDevTools: () => void;\n      enterFullscreen: () => void;\n      exitFullscreen: () => void;\n      saveLastModel: (url: string) => void;\n      getLastModel: () => Promise<string | null>;\n      setZoomFactor: (zoomFactor?: number) => Promise<boolean>;\n      saveZoomSetting: (url: string, zoomFactor: number) => void;\n      getZoomSetting: (url: string) => Promise<number>;\n      onEvent: (cb: (data: any) => void) => void;\n      saveModelState: (\n        url: string,\n        x: number,\n        y: number,\n        scale: number\n      ) => void;\n      getModelState: (\n        url: string\n      ) => Promise<{ x: number; y: number; scale: number } | null>;\n      getCaretPosition: () => Promise<{ x: number; y: number } | null>;\n    };\n  }\n}\n"],
  "mappings": ";;;AAAA,sBAA2C;AAE3C,8BAAc,kBAAkB,cAAc;AAAA,EAC5C,oBAAoB,CAAC,YACnB,4BAAY,OAAO,gCAAgC,OAAO;AAAA,EAC5D,OAAO,MAAM,4BAAY,KAAK,eAAe;AAAA,EAC7C,YAAY,CAAC,MACX,4BAAY,KAAK,uBAAuB,CAAC;AAAA,EAC3C,cAAc,MAAM,4BAAY,KAAK,uBAAuB;AAAA,EAC5D,iBAAiB,MAAM,4BAAY,KAAK,0BAA0B;AAAA,EAClE,gBAAgB,MAAM,4BAAY,KAAK,yBAAyB;AAAA,EAChE,eAAe,CAAC,QACd,4BAAY,KAAK,2BAA2B,GAAG;AAAA,EACjD,cAAc,MACZ,4BAAY,OAAO,wBAAwB;AAAA,EAC7C,gBAAgB,CAAC,KAAa,GAAW,GAAW,UAClD,4BAAY,KAAK,4BAA4B,EAAE,KAAK,GAAG,GAAG,MAAM,CAAC;AAAA,EACnE,eAAe,CACb,QAEA,4BAAY,OAAO,2BAA2B,GAAG;AAAA;AAAA,EAEnD,kBAAkB,MAChB,4BAAY,OAAO,4BAA4B;AAAA,EACjD,eAAe,CAAC,aAAqB,MACnC,4BAAY,OAAO,2BAA2B,UAAU;AAAA,EAC1D,iBAAiB,CAAC,KAAa,eAC7B,4BAAY,KAAK,6BAA6B,EAAE,KAAK,WAAW,CAAC;AAAA,EACnE,gBAAgB,CAAC,QACf,4BAAY,OAAO,4BAA4B,GAAG;AAAA,EACpD,SAAS,CAAC,OAA4B;AACpC,gCAAY,GAAG,iBAAiB,CAAC,KAAK,SAAS;AAC7C,UAAI;AACF,WAAG,IAAI;AAAA,MACT,SAAS,GAAG;AACV,gBAAQ,MAAM,CAAC;AAAA,MACjB;AAAA,IACF,CAAC;AAAA,EACH;AACF,CAAC;",
  "names": []
}
